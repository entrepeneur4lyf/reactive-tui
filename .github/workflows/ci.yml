name: CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  rust:
    name: Rust (fmt, clippy, tests) - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: rustfmt (check)
        run: cargo fmt --all -- --check

      - name: clippy (warn-only for now)
        run: cargo clippy --all-targets --all-features -- -W clippy::all -W clippy::pedantic || true

      - name: tests
        run: cargo test --all-features --all-targets --no-fail-fast

  node:
    name: Node bindings tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run AVA tests
        run: npm test --silent

  guard-ffi-unwrap:
    name: Guard: No unwrap/expect/panic in FFI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check FFI surface for unwrap/expect/panic
        shell: bash
        run: |
          set -euo pipefail
          if grep -n -E '\\b(unwrap|expect|panic!)\\(' src/ffi.rs; then
            echo 'Error: Unsafe unwrap/expect/panic found in src/ffi.rs'
            exit 1
          else
            echo 'OK: No unwrap/expect/panic in src/ffi.rs'
          fi

  audit:
    name: Security audit (advisories)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Run cargo audit
        run: cargo audit --color never

