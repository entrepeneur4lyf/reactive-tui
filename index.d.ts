/* auto-generated by NAPI-RS */
/* eslint-disable */
/** Action constants for JavaScript */
export declare class Actions {
  get quit(): string
  get refresh(): string
  get focusNext(): string
  get focusPrevious(): string
  get activate(): string
  get scrollUp(): string
  get scrollDown(): string
  get copy(): string
  get paste(): string
  get save(): string
}

/** Export comprehensive type definitions for TypeScript generation */
export declare class EnhancedFfiTypes {
  /** Get all available semantic color keys */
  static semanticColorKeys(): Array<string>
  /** Get all available color palette keys */
  static colorPaletteKeys(): Array<string>
  /** Get widget type constants for TypeScript */
  static widgetTypes(): Array<string>
  /** Get element attribute constants */
  static elementAttributes(): Array<string>
  /** Get CSS utility class prefixes */
  static cssUtilityPrefixes(): Array<string>
}
export type EnhancedFFITypes = EnhancedFfiTypes

/** JavaScript-compatible ColorDefinition wrapper */
export declare class JsColorDefinition {
  /** Create color from RGB values */
  static rgb(r: number, g: number, b: number): JsColorDefinition
  /** Create color from hex string */
  static hex(hexColor: string): JsColorDefinition
  /** Get RGB values */
  getRgb(): [number, number, number]
  /** Convert to ANSI escape code */
  toAnsi(background: boolean): string
}

/** JavaScript-compatible ColorTheme wrapper with comprehensive theme support */
export declare class JsColorTheme {
  /** Get dark theme */
  static dark(): JsColorTheme
  /** Get light theme */
  static light(): JsColorTheme
  /** Get terminal theme */
  static terminal(): JsColorTheme
  /** Get theme as JSON string (with camelCase conversion) */
  toJson(): string
  /** Load theme from JSON string (with camelCase support) */
  static fromJson(json: string): JsColorTheme
  /** Get semantic color as ANSI code */
  getSemanticColor(semanticKey: string): string
  /** Get semantic background color as ANSI code */
  getSemanticBackground(semanticKey: string): string
  /** Get theme name */
  getName(): string
  /** Get theme description */
  getDescription(): string
}

/** JavaScript-compatible Element wrapper */
export declare class JsElement {
  /** Create a new element with tag */
  constructor(tag: string)
  /** Add a CSS class */
  addClass(className: string): void
  /** Set element ID */
  setId(id: string): void
  /** Set text content */
  setContent(content: string): void
  /** Add a child element */
  addChild(child: JsElement): void
  /** Set an attribute */
  setAttribute(name: string, value: string): void
  /** Make element focusable */
  makeFocusable(tabIndex?: number | undefined | null): void
}

/** JavaScript-compatible Reactive State wrapper */
export declare class JsReactiveState {
  /** Create a new reactive state */
  constructor()
  /** Get state as JSON string */
  getStateJson(): string
  /** Set state from JSON string */
  setStateJson(json: string): void
}

/** JavaScript-compatible Toast wrapper */
export declare class JsToast {
  /** Create an info toast */
  static info(message: string): JsToast
  /** Create a success toast */
  static success(message: string): JsToast
  /** Create a warning toast */
  static warning(message: string): JsToast
  /** Create an error toast */
  static error(message: string): JsToast
  /** Set toast title */
  setTitle(title: string): void
  /** Set toast duration in milliseconds */
  setDuration(durationMs: number): void
}

/** JavaScript-compatible Toast Manager */
export declare class JsToastManager {
  /** Create a new toast manager */
  constructor(viewportWidth: number, viewportHeight: number)
  /** Show a toast */
  showToast(toast: JsToast): void
  /** Dismiss a toast by ID */
  dismissToast(toastId: string): boolean
  /** Clean up expired toasts */
  cleanupExpired(): Array<string>
}

/** JavaScript-compatible TUI Application wrapper */
export declare class JsTuiApp {
  /** Create a new TUI application builder */
  constructor()
  /** Set the application title */
  setTitle(title: string): void
  /** Load CSS stylesheet from file */
  loadStylesheet(path: string): void
  /** Load CSS from string */
  loadCss(css: string): void
  /** Set the root component */
  setComponent(element: JsElement): void
  /** Run the application */
  start(): string
  /** Send a message to the application */
  sendMessage(message: string): void
}

/** Utility functions for common TUI operations */
export declare class TuiUtils {
  /** Create a div element */
  static div(): JsElement
  /** Create a text element */
  static text(content: string): JsElement
  /** Create a button element */
  static button(): JsElement
  /** Create an input element */
  static input(): JsElement
  /** Parse CSS and return validation errors */
  static validateCss(css: string): Array<string>
  /** Get terminal size */
  static getTerminalSize(): [number, number]
}

/** Module-level export for package.json "napi" field */
export declare function getVersion(): string

/** NAPI module registration */
export declare function init(): void

/** Initialize the TUI library (call this first from JavaScript) */
export declare function initTui(): void
